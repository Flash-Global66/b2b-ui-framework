name: Publish Packages

on:
  push:
    branches: [main]
    paths:
      - 'components/**'
      - 'lerna.json'
      - 'package*.json'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GBP_PACKAGE_TOKEN }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://npm.pkg.github.com'
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Configure temporary .npmrc
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GBP_PACKAGE_TOKEN }}" > .npmrc
          echo "//npm.fontawesome.com/:_authToken=${{ secrets.FONT_AWESOME_TOKEN }}" >> .npmrc
          npm config set @flash-global66:registry https://npm.pkg.github.com/
          npm config set @fortawesome:registry https://npm.fontawesome.com/

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check existing tags
        id: check-tags
        run: |
          git fetch --tags
          echo "LOCAL_TAGS=$(git tag --list | jq -R -s -c 'split("\n")')" >> $GITHUB_OUTPUT

      - name: Version packages with Lerna
        id: version
        env:
          GIT_AUTHOR_NAME: GitHub Actions
          GIT_AUTHOR_EMAIL: actions@github.com
          GIT_COMMITTER_NAME: GitHub Actions
          GIT_COMMITTER_EMAIL: actions@github.com
        run: |
          OUTPUT=$(npx lerna version --conventional-commits --yes --no-push --tag-version-prefix="" --create-release=github --message "chore(release): publish %s [skip ci]" 2>&1) || true
          echo "$OUTPUT"
          if echo "$OUTPUT" | grep -q "No changed packages to publish"; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish packages with Lerna
        if: steps.version.outputs.no_changes == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GBP_PACKAGE_TOKEN }}
        run: |
          npx lerna publish from-package --yes --verify-access --no-verify-registry

      - name: Push tags with conflict check
        run: |
          git tag --list | while read tag; do
            if ! grep -q "$tag" <<< "${{ steps.check-tags.outputs.LOCAL_TAGS }}"; then
              echo "Pushing new tag: $tag"
              git push origin "$tag"
            else
              echo "Skipping existing tag: $tag"
            fi
          done

      - name: Cleanup .npmrc
        run: rm -f .npmrc
